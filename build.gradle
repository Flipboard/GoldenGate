buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:1.12.+'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'maven'
apply plugin: 'signing'

version = "1.2.0"
group = "com.flipboard.goldengate"

def canUploadArchives() {
    return project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword') && project.hasProperty('sonatypeRepo')
}

configurations {
    archives {
        extendsFrom configurations.default
    }
}

if (canUploadArchives()) {
    uploadArchives {
        configuration = configurations.archives
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: sonatypeRepo) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'GoldenGate'
                packaging 'jar'
                description 'Generate type safe java bridge into webview javascript code'
                url 'https://github.com/flipboard/GoldenGate'

                scm {
                    url 'https://github.com/Flipboard/GoldenGate.git'
                }

                licenses {
                    license {
                        name 'BSD 3-Clause License'
                        url 'https://github.com/Flipboard/GoldenGate/blob/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'emilsjolander'
                        name 'Emil Sj√∂lander'
                        email 'esjolander@flipboard.com'
                    }
                }
            }
        }
    }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}